'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _common = require('./common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MIN_ROW_HEIGHT = 3;
var MAX_ROW_HEIGHT = 5;
var ROWS_TO_DISPLAY = 3.5;

var styles = {
  base: {
    left: '0',
    width: '100%'
  },

  warningText: {
    style: {
      bg: 'yellow',
      fg: 'black'
    },
    width: '95%',
    border: { type: 'line', fg: 'yellow', bg: 'yellow' }
  },
  dismissButton: {
    left: '95%',
    width: '5%',
    border: { type: 'line', fg: 'red' },
    hover: {
      border: { type: 'line', fg: 'yellow' }
    }
  }
};

var WarningRow = function WarningRow(_ref) {
  var count = _ref.count,
      warning = _ref.warning,
      onDismiss = _ref.onDismiss,
      top = _ref.top,
      height = _ref.height;
  return _react2.default.createElement(
    'box',
    { top: top, height: height },
    _react2.default.createElement(
      'box',
      { 'class': styles.warningText, height: height },
      '(' + count + ') ' + warning
    ),
    _react2.default.createElement(
      'box',
      {
        clickable: true,
        height: height,
        'class': styles.dismissButton,
        onClick: onDismiss },
      '\xD7'
    )
  );
};

var Yellowbox = function (_Component) {
  _inherits(Yellowbox, _Component);

  function Yellowbox(props, context) {
    _classCallCheck(this, Yellowbox);

    var _this = _possibleConstructorReturn(this, (Yellowbox.__proto__ || Object.getPrototypeOf(Yellowbox)).call(this, props, context));

    _this.state = {
      inspecting: null,
      warningMap: _common._warningMap
    };
    _this.dismissWarning = function (warning) {
      var _this$state = _this.state,
          inspecting = _this$state.inspecting,
          warningMap = _this$state.warningMap;

      if (warning) {
        warningMap.delete(warning);
      } else {
        warningMap.clear();
      }
      _this.setState({
        inspecting: warning && inspecting !== warning ? inspecting : null,
        warningMap: warningMap
      });
    };
    return _this;
  }

  _createClass(Yellowbox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var scheduled = null;
      this._listener = _common._warningEmitter.addListener('warning', function (warningMap) {
        // Use `setImmediate` because warnings often happen during render, but
        // state cannot be set while rendering.
        scheduled = scheduled || setImmediate(function () {
          scheduled = null;
          _this2.setState({ warningMap: warningMap });
        });
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener && typeof this._listener.remove === 'function') {
        this._listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          layout = _props.layout,
          style = _props.style;


      if (console.disableYellowBox || this.state.warningMap.size === 0) {
        // react blessed needs a null element
        return _react2.default.createElement(
          'element',
          { 'class': { top: '100%', width: '0%' } },
          'nada'
        );
      }

      var rowHeight = Math.max(MIN_ROW_HEIGHT, Math.min(MAX_ROW_HEIGHT, Math.floor(layout.height / ROWS_TO_DISPLAY)));
      var rows = [];

      this.state.warningMap.forEach(function (count, warning) {
        if (!(0, _common.isWarningIgnored)(warning)) {
          rows.push(_react2.default.createElement(WarningRow, {
            key: warning,
            top: rowHeight * rows.length,
            height: rowHeight,
            count: count,
            warning: warning,
            onClick: function onClick() {
              return _this3.setState({ inspecting: warning });
            },
            onDismiss: function onDismiss() {
              return _this3.dismissWarning(warning);
            }
          }));
        }
      });

      return _react2.default.createElement(
        'box',
        _extends({
          'class': styles.base
        }, style, layout, {
          scrollable: true,
          alwaysScroll: true
        }),
        rows
      );
    }
  }]);

  return Yellowbox;
}(_react.Component);

;

Yellowbox.propTypes = {
  layout: _propTypes2.default.shape({
    height: _propTypes2.default.number
  })
};

Yellowbox.defaultProps = {
  style: {}
};

exports.default = Yellowbox;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _common = require('./common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WarningRow = function WarningRow(_ref) {
  var count = _ref.count,
      warning = _ref.warning,
      onClick = _ref.onClick;

  var countText = count > 1 ? _react2.default.createElement(
    'span',
    { style: styles.listRowCount },
    '(' + count + ') '
  ) : null;

  return _react2.default.createElement(
    'div',
    { style: styles.listRow },
    _react2.default.createElement(
      'button',
      {
        onClick: onClick,
        style: styles.listRowContent },
      _react2.default.createElement(
        'span',
        { style: styles.listRowText },
        countText,
        warning
      )
    )
  );
};

var WarningInspector = function WarningInspector(_ref2) {
  var count = _ref2.count,
      warning = _ref2.warning,
      onClose = _ref2.onClose,
      onDismiss = _ref2.onDismiss,
      onDismissAll = _ref2.onDismissAll;

  var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';

  return _react2.default.createElement(
    'div',
    {
      tabIndex: 0,
      onClick: onClose,
      style: styles.inspector },
    _react2.default.createElement(
      'div',
      { style: styles.inspectorContent },
      _react2.default.createElement(
        'div',
        { style: styles.inspectorCount },
        _react2.default.createElement(
          'span',
          { style: styles.inspectorCountText },
          countSentence
        )
      ),
      _react2.default.createElement(
        'div',
        { style: styles.inspectorWarning },
        _react2.default.createElement(
          'span',
          { style: styles.inspectorWarningText },
          warning
        )
      ),
      _react2.default.createElement(
        'div',
        { style: styles.inspectorButtons },
        _react2.default.createElement(
          'button',
          {
            onClick: onDismiss,
            style: styles.inspectorButton },
          _react2.default.createElement(
            'span',
            { style: styles.inspectorButtonText },
            'Dismiss'
          )
        ),
        _react2.default.createElement(
          'button',
          {
            onClick: onDismissAll,
            style: styles.inspectorButton },
          _react2.default.createElement(
            'span',
            { style: styles.inspectorButtonText },
            'Dismiss All'
          )
        )
      )
    )
  );
};

var YellowBox = function (_Component) {
  _inherits(YellowBox, _Component);

  function YellowBox(props, context) {
    _classCallCheck(this, YellowBox);

    var _this = _possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

    _this.state = {
      inspecting: null,
      warningMap: _common._warningMap
    };
    _this.dismissWarning = function (warning) {
      var _this$state = _this.state,
          inspecting = _this$state.inspecting,
          warningMap = _this$state.warningMap;

      if (warning) {
        warningMap.delete(warning);
      } else {
        warningMap.clear();
      }
      _this.setState({
        inspecting: warning && inspecting !== warning ? inspecting : null,
        warningMap: warningMap
      });
    };
    return _this;
  }

  _createClass(YellowBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var scheduled = null;
      this._listener = _common._warningEmitter.addListener('warning', function (warningMap) {
        // Use `setImmediate` because warnings often happen during render, but
        // state cannot be set while rendering.
        scheduled = scheduled || setImmediate(function () {
          scheduled = null;
          _this2.setState({ warningMap: warningMap });
        });
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (console.disableYellowBox || this.state.warningMap.size === 0) {
        return null;
      }

      var inspecting = this.state.inspecting;

      var inspector = inspecting !== null ? _react2.default.createElement(WarningInspector, {
        count: this.state.warningMap.get(inspecting),
        warning: inspecting,
        onClose: function onClose() {
          return _this3.setState({ inspecting: null });
        },
        onDismiss: function onDismiss() {
          return _this3.dismissWarning(inspecting);
        },
        onDismissAll: function onDismissAll() {
          return _this3.dismissWarning(null);
        }
      }) : null;

      var rows = [];
      this.state.warningMap.forEach(function (count, warning) {
        if (!(0, _common.isWarningIgnored)(warning)) {
          rows.push(_react2.default.createElement(WarningRow, {
            key: warning,
            count: count,
            warning: warning,
            onClick: function onClick() {
              return _this3.setState({ inspecting: warning });
            },
            onDismiss: function onDismiss() {
              return _this3.dismissWarning(warning);
            }
          }));
        }
      });

      var listStyle = Object.assign({}, styles.list,
      // Additional `0.4` so the 5th row can peek into view.
      { height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight) }, this.props.style);
      return _react2.default.createElement(
        'div',
        { style: inspector ? styles.fullScreen : listStyle },
        _react2.default.createElement(
          'div',
          { style: Object.assign({}, listStyle, { overflowY: 'auto' }) },
          rows
        ),
        inspector
      );
    }
  }]);

  return YellowBox;
}(_react.Component);

YellowBox.propTypes = {
  style: _propTypes2.default.object
};

var backgroundColor = function backgroundColor(opacity) {
  return 'rgba(250, 186, 48, ' + opacity + ')';
};
var textColor = 'white';
var rowGutter = 0;
var rowHeight = 46;

var styles = {
  fullScreen: {
    backgroundColor: 'transparent',
    position: 'fixed',
    display: 'flex',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    zIndex: 10000
  },
  inspector: {
    backgroundColor: backgroundColor(0.95),
    flex: 1
  },
  inspectorContainer: {
    flex: 1
  },
  inspectorButtons: {
    flexDirection: 'row',
    position: 'absolute',
    left: 200,
    right: 0,
    top: 0
  },
  inspectorButton: {
    background: 'transparent',
    border: 0,
    flex: 1,
    padding: 22
  },
  inspectorButtonText: {
    color: textColor,
    fontSize: 14,
    opacity: 0.8,
    textAlign: 'center'
  },
  inspectorContent: {
    flex: 1,
    paddingTop: 5
  },
  inspectorCount: {
    padding: 15,
    paddingBottom: 0
  },
  inspectorCountText: {
    color: textColor,
    fontSize: 14
  },
  inspectorWarning: {
    padding: 15,
    position: 'absolute',
    top: 39,
    bottom: 300,
    left: 0,
    right: 0
  },
  inspectorWarningText: {
    color: textColor,
    fontSize: 16,
    fontWeight: '600'
  },
  list: {
    backgroundColor: 'transparent',
    position: 'fixed',
    left: 0,
    right: 0,
    bottom: 0
  },
  listRow: {
    position: 'relative',
    backgroundColor: backgroundColor(0.95),
    borderWidth: '1px 0',
    borderStyle: 'solid none',
    borderTopColor: 'rgba(255, 255, 255, 0.5)',
    borderBottomColor: 'rgba(250, 186, 48, 1)',
    height: rowHeight - 2, // for border
    marginTop: rowGutter
  },
  listRowContent: {
    background: 'transparent',
    border: 0,
    lineHeight: rowHeight + 'px',
    textAlign: 'left',
    width: '100%'
  },
  listRowCount: {
    color: 'rgba(255, 255, 255, 0.5)'
  },
  listRowText: {
    color: textColor,
    marginLeft: 15,
    marginRight: 15
  }
};

exports.default = YellowBox;